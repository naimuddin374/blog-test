{"ast":null,"code":"var _jsxFileName = \"/home/naim/Desktop/test/client/src/components/layout/AlertMessage.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Swal from 'sweetalert2';\n\nclass AlertMessage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      message: null,\n      type: null,\n      time: null\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (JSON.stringify(nextProps.common.time) === JSON.stringify(prevState.time)) return null;\n    return {\n      message: nextProps.common.message,\n      type: nextProps.common.type,\n      time: nextProps.common.time\n    };\n  }\n\n  render() {\n    let {\n      message,\n      type\n    } = this.state;\n\n    if (message) {\n      const Toast = Swal.mixin({\n        toast: true,\n        position: 'bottom-end',\n        showConfirmButton: false,\n        timer: 3000,\n        timerProgressBar: true,\n        onOpen: toast => {\n          toast.addEventListener('mouseenter', Swal.stopTimer);\n          toast.addEventListener('mouseleave', Swal.resumeTimer);\n        }\n      });\n      Toast.fire({\n        icon: type,\n        title: message\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 16\n      }\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  common: state.common\n});\n\nexport default connect(mapStateToProps)(AlertMessage);","map":{"version":3,"sources":["/home/naim/Desktop/test/client/src/components/layout/AlertMessage.js"],"names":["React","connect","Swal","AlertMessage","Component","state","message","type","time","getDerivedStateFromProps","nextProps","prevState","JSON","stringify","common","render","Toast","mixin","toast","position","showConfirmButton","timer","timerProgressBar","onOpen","addEventListener","stopTimer","resumeTimer","fire","icon","title","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AAAA;AAAA;AAAA,SACvCC,KADuC,GAC/B;AACJC,MAAAA,OAAO,EAAE,IADL;AAEJC,MAAAA,IAAI,EAAE,IAFF;AAGJC,MAAAA,IAAI,EAAE;AAHF,KAD+B;AAAA;;AAMvC,SAAOC,wBAAP,CAAgCC,SAAhC,EAA2CC,SAA3C,EAAsD;AAClD,QAAIC,IAAI,CAACC,SAAL,CAAeH,SAAS,CAACI,MAAV,CAAiBN,IAAhC,MAA0CI,IAAI,CAACC,SAAL,CAAeF,SAAS,CAACH,IAAzB,CAA9C,EAA8E,OAAO,IAAP;AAC9E,WAAO;AACHF,MAAAA,OAAO,EAAEI,SAAS,CAACI,MAAV,CAAiBR,OADvB;AAEHC,MAAAA,IAAI,EAAEG,SAAS,CAACI,MAAV,CAAiBP,IAFpB;AAGHC,MAAAA,IAAI,EAAEE,SAAS,CAACI,MAAV,CAAiBN;AAHpB,KAAP;AAKH;;AACDO,EAAAA,MAAM,GAAG;AACL,QAAI;AAAET,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAoB,KAAKF,KAA7B;;AACA,QAAIC,OAAJ,EAAa;AACT,YAAMU,KAAK,GAAGd,IAAI,CAACe,KAAL,CAAW;AACrBC,QAAAA,KAAK,EAAE,IADc;AAErBC,QAAAA,QAAQ,EAAE,YAFW;AAGrBC,QAAAA,iBAAiB,EAAE,KAHE;AAIrBC,QAAAA,KAAK,EAAE,IAJc;AAKrBC,QAAAA,gBAAgB,EAAE,IALG;AAMrBC,QAAAA,MAAM,EAAGL,KAAD,IAAW;AACfA,UAAAA,KAAK,CAACM,gBAAN,CAAuB,YAAvB,EAAqCtB,IAAI,CAACuB,SAA1C;AACAP,UAAAA,KAAK,CAACM,gBAAN,CAAuB,YAAvB,EAAqCtB,IAAI,CAACwB,WAA1C;AACH;AAToB,OAAX,CAAd;AAWAV,MAAAA,KAAK,CAACW,IAAN,CAAW;AACPC,QAAAA,IAAI,EAAErB,IADC;AAEPsB,QAAAA,KAAK,EAAEvB;AAFA,OAAX;AAIH;;AACD,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAlCsC;;AAqC3C,MAAMwB,eAAe,GAAGzB,KAAK,KAAK;AAC9BS,EAAAA,MAAM,EAAET,KAAK,CAACS;AADgB,CAAL,CAA7B;;AAGA,eAAeb,OAAO,CAAC6B,eAAD,CAAP,CAAyB3B,YAAzB,CAAf","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux';\nimport Swal from 'sweetalert2'\n\nclass AlertMessage extends React.Component {\n    state = {\n        message: null,\n        type: null,\n        time: null\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (JSON.stringify(nextProps.common.time) === JSON.stringify(prevState.time)) return null\n        return {\n            message: nextProps.common.message,\n            type: nextProps.common.type,\n            time: nextProps.common.time,\n        }\n    }\n    render() {\n        let { message, type } = this.state\n        if (message) {\n            const Toast = Swal.mixin({\n                toast: true,\n                position: 'bottom-end',\n                showConfirmButton: false,\n                timer: 3000,\n                timerProgressBar: true,\n                onOpen: (toast) => {\n                    toast.addEventListener('mouseenter', Swal.stopTimer)\n                    toast.addEventListener('mouseleave', Swal.resumeTimer)\n                }\n            })\n            Toast.fire({\n                icon: type,\n                title: message\n            })\n        }\n        return <div></div>\n    }\n}\n\nconst mapStateToProps = state => ({\n    common: state.common\n})\nexport default connect(mapStateToProps)(AlertMessage)"]},"metadata":{},"sourceType":"module"}